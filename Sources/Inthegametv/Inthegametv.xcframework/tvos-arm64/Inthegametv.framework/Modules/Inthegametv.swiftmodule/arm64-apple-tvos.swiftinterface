// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-tvos14.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Inthegametv
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CommonCrypto
import CoreGraphics
import CoreMedia
import DeveloperToolsSupport
import Foundation
@_exported import Inthegametv
import Storket
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libxml2
public enum ITGMenuItem : Swift.String, Swift.CaseIterable, Swift.Decodable {
  case account
  case leaderboard
  case shop
  case chat
  case stats
  case `extension`
  case debug
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Inthegametv.ITGMenuItem]
  public typealias RawValue = Swift.String
  public static var allCases: [Inthegametv.ITGMenuItem] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isWebP: Swift.Bool {
    get
  }
}
public struct User : Swift.Codable {
  public var name: Swift.String {
    get
  }
  public var email: Swift.String {
    get
  }
  public var thumbnail: Swift.String? {
    get
  }
  public let id: Swift.String
  public var stats: [Inthegametv.UserChannelPoints]? {
    get
  }
  public var activities: [Inthegametv.UserActivity]? {
    get
  }
  public var visibleActivities: Inthegametv.UserPermissions {
    get
  }
  public let createdAt: Foundation.Date
  public let language: Swift.String
  public let foreignId: Swift.String?
  public let role: Inthegametv.UserRole
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserChannelPoints : Swift.Codable {
  public let channelSlug: Swift.String
  public var coins: Swift.Int {
    get
  }
  public var expoints: Swift.Int {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserActivity : Swift.Codable {
  public let id: Swift.String
  public let answer: Swift.String
  public var correctAnswer: Swift.String?
  public let channelSlug: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UserRole : Swift.String, Swift.Codable {
  case user
  case guest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LeaderboardDisplayMode : Swift.String, Swift.Codable {
  case all
  case registered
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChannelDirection : Swift.String, Swift.Codable {
  case ltr
  case rtl
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticsEventType : Swift.String, Swift.Codable {
  case view, engage, close, register, login
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticsParent : Swift.String, Swift.Codable {
  case inject, clock, wiki, menu, poll, quiz, shop, sequence, product, app
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticsModule : Swift.String, Swift.Codable {
  case quiz, poll, rating, wiki, product, shop, leaderboard, register, login, menu, stats, chat, account, flexi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ModuleType : Swift.String, Swift.Codable {
  case poll
  case prediction
  case rating
  case quiz
  case wiki
  case product
  case sequence
  case account
  case leaderboard
  case shop
  case chat
  case stats
  case flexi
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserPermissions : Swift.Codable {
  public let rating: Swift.Bool
  public let prediction: Swift.Bool
  public let product: Swift.Bool
  public let quiz: Swift.Bool
  public let poll: Swift.Bool
  public let wiki: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LeaderboardResponse : Swift.Codable {
  public var all: [Inthegametv.LeaderboardItem]
  public var myself: Inthegametv.LeaderboardItem?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LeaderboardItem : Swift.Codable {
  public let rankingPosition: Swift.Int
  public let userName: Swift.String
  public let thumbnail: Swift.String?
  public let totalCoins: Swift.Int?
  public let totalExpoints: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum LeaderboardSorting : Swift.String, Swift.Decodable {
  case expoints
  case coins
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AnalyticsInfo : Swift.Codable {
  public let module: Inthegametv.AnalyticsModule?
  public let moduleId: Swift.String?
  public let submodule: Swift.String?
  public let parent: Inthegametv.AnalyticsParent?
  public let parentId: Swift.String?
  public let campaignId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum WebPDecodingError : Swift.UInt32, Swift.Error {
  case none
  case outOfMemory
  case invalidParam
  case bitstreamError
  case unsupportedFeature
  case suspended
  case userAbort
  case notEnoughData
  case invalidHeader
  case initConfigFailed
  case imageRenderFailed
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum WebPScalingMode {
  case aspectFit
  case aspectFill
  case scale
  public static func == (a: Inthegametv.WebPScalingMode, b: Inthegametv.WebPScalingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreGraphics.CGImage {
  public static func sizeOfWebP(at url: Foundation.URL) -> CoreFoundation.CGSize?
  public static func sizeOfWebP(with data: Foundation.Data) -> CoreFoundation.CGSize?
  public static func webpImage(contentsOfFile url: Foundation.URL, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, scalingMode: Inthegametv.WebPScalingMode = .aspectFit) throws -> CoreGraphics.CGImage
  public static func webpImage(data: Foundation.Data, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, scalingMode: Inthegametv.WebPScalingMode = .aspectFit) throws -> CoreGraphics.CGImage
}
infix operator ~= : DefaultPrecedence
prefix operator ^-^
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PassthroughView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ITGStorketHelper : ObjectiveC.NSObject {
  public func connect(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stop()
  public func connectChat(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stopChat()
  public func connectStats(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stopStats()
  @objc override dynamic public init()
  @objc deinit
}
extension Inthegametv.ITGStorketHelper : Storket.StorketDelegate {
  public func didReceive(messages: [Storket.StorketMessage], storketType: Storket.StorketType)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public protocol ITGOverlayDelegate : AnyObject {
  func overlayDidLoadChannelInfo(_ videoUrl: Swift.String?)
  func overlayRequestedVideoTime()
  func overlayRequestedPause()
  func overlayRequestedPlay()
  func overlayRequestedFocus()
  func overlayReleasedFocus()
  func overlayResizeVideoWidth(activityWidth: CoreFoundation.CGFloat)
  func overlayResetVideoWidth()
  func overlayResizeVideoHeight(activityHeight: CoreFoundation.CGFloat)
  func overlayResetVideoHeight()
  func overlayReceivedDeeplink(_ link: Swift.String)
  func overlayRequestedVideoSeek(time: Foundation.TimeInterval)
  func overlayRequestedVideoResolution() -> CoreFoundation.CGSize
  func overlayDidProcessAnalyticEvent(info: Inthegametv.AnalyticsInfo, type: Inthegametv.AnalyticsEventType)
  func userState(_ user: Inthegametv.User)
  func overlayDidPresentContent(_ content: Inthegametv.ITGContent)
  func overlayDidEndPresentingContent(_ content: Inthegametv.ITGContent)
  func overlayRequestedVideoLength() -> Foundation.TimeInterval
  func overlayRequestedVideoGravity(_ videoGravity: AVFoundation.AVLayerVideoGravity)
  func overlayRequestedResetVideoGravity()
  func overlayRequestedVideoSoundLevel(_ soundLevel: Swift.Float)
  func overlayRequestedResetVideoSoundLevel()
}
public enum ITGContent : Swift.String {
  case slip
  case menu
  case sidebar
  case popup
  case notification
  case flexi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGOverlayView : UIKit.UIView {
  public enum AutoBlockMode : Swift.String {
    case auto
    case disabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static var overlayVersion: Swift.String
  @_Concurrency.MainActor(unsafe) public class var reactCompatMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any Inthegametv.ITGOverlayDelegate)?
  @_Concurrency.MainActor(unsafe) public var autoBlockValue: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var blockAll: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var blockMenu: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var blockNotifications: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var blockSlip: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var blockSidebar: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var injectionDelay: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var canOpenMenuFromRemote: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var adsMetadata: [Swift.Dictionary<Swift.String, Any>]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: Inthegametv.ChannelDirection? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredFocusEnvironments: [any UIKit.UIFocusEnvironment] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func load(accountId: Swift.String, environment: Inthegametv.ITGEnvironment = ITGEnvironment.defaultEnvironment, delegate: (any Inthegametv.ITGOverlayDelegate)? = nil, foreignId: Swift.String? = nil, userName: Swift.String? = nil, userAvatar: Swift.String? = nil, userEmail: Swift.String? = nil, userPhone: Swift.String? = nil, userRole: Inthegametv.UserRole)
  @_Concurrency.MainActor(unsafe) public func load(channelSlug: Swift.String, virtualChannels: [Swift.String]? = [], accountId: Swift.String, environment: Inthegametv.ITGEnvironment = ITGEnvironment.defaultEnvironment, delegate: (any Inthegametv.ITGOverlayDelegate)?, language: Swift.String = "en", foreignId: Swift.String? = nil, userName: Swift.String? = nil, userAvatar: Swift.String? = nil, userEmail: Swift.String? = nil, userPhone: Swift.String? = nil, userRole: Inthegametv.UserRole, videoView: UIKit.UIView, useWebp: Swift.Bool = false, vars: [Swift.String : Any]? = nil)
  @_Concurrency.MainActor(unsafe) public func getLeaderboard(_ page: Swift.Int, limit: Swift.Int, period: Inthegametv.LeaderboardPeriod, leaderboardSorting: Inthegametv.LeaderboardSorting, leaderboardDisplayMode: Inthegametv.LeaderboardDisplayMode, completion: @escaping (Inthegametv.LeaderboardResponse?, (any Swift.Error)?) -> ())
  @_Concurrency.MainActor(unsafe) public func resetUser()
  @_Concurrency.MainActor(unsafe) public func closeInteractionIfNeeded() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayingInteraction() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayingSidebar() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func videoPaused(time: Foundation.TimeInterval, userInitiated: Swift.Bool = false, isSeeking: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func videoPlaying(time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public func setLiveMode(enabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func injectActivity(_ activity: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) public func injectFlexi(_ flexi: Swift.String)
  @_Concurrency.MainActor(unsafe) public func injectFlexi(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func openMenu()
  @_Concurrency.MainActor(unsafe) public func openAccount()
  @_Concurrency.MainActor(unsafe) public func openLeaderboard()
  @_Concurrency.MainActor(unsafe) public func openShop()
  @_Concurrency.MainActor(unsafe) public func openChat()
  @_Concurrency.MainActor(unsafe) public func openStats()
  @_Concurrency.MainActor(unsafe) public func openExtension()
  @_Concurrency.MainActor(unsafe) public func closeFlexi()
  @_Concurrency.MainActor(unsafe) public func closeMenu()
  @_Concurrency.MainActor(unsafe) public func closeAccount()
  @_Concurrency.MainActor(unsafe) public func closeLeaderboard()
  @_Concurrency.MainActor(unsafe) public func closeShop()
  @_Concurrency.MainActor(unsafe) public func closeChat()
  @_Concurrency.MainActor(unsafe) public func closeStats()
  @_Concurrency.MainActor(unsafe) public func closeExtension()
  @_Concurrency.MainActor(unsafe) public func isMenuVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func currentContent() -> [Inthegametv.ITGContent]
  @_Concurrency.MainActor(unsafe) public func currentMenuPage() -> Inthegametv.ITGMenuItem?
  @_Concurrency.MainActor(unsafe) public func closeAll(_ includingPauseAd: Swift.Bool = true)
}
extension Inthegametv.ITGOverlayView {
  @_Concurrency.MainActor(unsafe) public func menuShouldClose()
}
extension Foundation.URL {
  public static var webpFileExtension: Swift.String {
    get
  }
  public var isWebP: Swift.Bool {
    get
  }
  public func isWebP(ignoringFileExtension: Swift.Bool = false) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGAnswerView : UIKit.UIView, Inthegametv.NibView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var button: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryButton: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var roundButton: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var pollPercentageLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var coinsLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageHeightConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageWidthConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageHeightConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageWidthConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryButtonBottom: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageTrailingToButton: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageLeadeingToMainImage: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageVerticalCenterToMainImage: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var pollPercentageLabelCenterMainImageConstaint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var pollPercentageLabelBottomMainImageConstaint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var buttonVerticalCenterConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var pressedScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var pressedAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum LeaderboardPeriod : Swift.String, Swift.CustomStringConvertible, Swift.CaseIterable {
  case alltime
  case week
  case day
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Inthegametv.LeaderboardPeriod]
  public typealias RawValue = Swift.String
  public static var allCases: [Inthegametv.LeaderboardPeriod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Inthegametv.LeaderboardItem : Swift.Equatable {
  public static func == (lhs: Inthegametv.LeaderboardItem, rhs: Inthegametv.LeaderboardItem) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FocusObservableView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var focusChangeObservationBlock: ((UIKit.UIView?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(webpData: Foundation.Data, scale: CoreFoundation.CGFloat? = 1.0, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, scalingMode: Inthegametv.WebPScalingMode = .aspectFit)
  convenience public init?(contentsOfWebPFile url: Foundation.URL, scale: CoreFoundation.CGFloat? = 1.0, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, scalingMode: Inthegametv.WebPScalingMode = .aspectFit)
  public static func webpNamed(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main) -> UIKit.UIImage?
}
public struct ITGEnvironment {
  public static var defaultEnvironment: Inthegametv.ITGEnvironment {
    get
  }
  public let apiBaseURL: Swift.String
  public let imageBaseURL: Swift.String
  public let envName: Swift.String
  public let storageURL: Swift.String
  public init(envName: Swift.String)
  public init(apiBaseURL: Swift.String, imageBaseURL: Swift.String, envName: Swift.String, storageURL: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGRatingAnswerView : UIKit.UIView, Inthegametv.NibView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol NibView {
  static func nibName(_ isLandscapeiOS: Swift.Bool) -> Swift.String
}
extension Inthegametv.NibView {
  public static func nibName(_ isLandscapeiOS: Swift.Bool = false) -> Swift.String
}
extension Inthegametv.NibView where Self : UIKit.UIView {
  public static func fromNib(_ isLandscapeiOS: Swift.Bool = false) -> Self
}
extension UIKit.UIImage {
  public class func imageWithColor(_ color: UIKit.UIColor) -> UIKit.UIImage
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
  convenience public init?(hex: Swift.String, opacity: CoreFoundation.CGFloat)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func constraintsFillSuperview(top: CoreFoundation.CGFloat? = 0, bottom: CoreFoundation.CGFloat? = 0, leading: CoreFoundation.CGFloat? = 0, trailing: CoreFoundation.CGFloat? = 0, verticalToSafeArea: Swift.Bool = false, horizontalToSafeArea: Swift.Bool = false)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class FocusTvButton : UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBackgroundEndColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBackgroundEndColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var pressedScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var pressedAlpha: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientStartPoint: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientEndPoint: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var leftContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rightContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var minWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var minHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var buttonType: UIKit.UIButton.ButtonType {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sendActions(for controlEvents: UIKit.UIControl.Event)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SpriteImageView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Inthegametv.ITGMenuItem : Swift.Equatable {}
extension Inthegametv.ITGMenuItem : Swift.Hashable {}
extension Inthegametv.ITGMenuItem : Swift.RawRepresentable {}
extension Inthegametv.UserRole : Swift.Equatable {}
extension Inthegametv.UserRole : Swift.Hashable {}
extension Inthegametv.UserRole : Swift.RawRepresentable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.Equatable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.Hashable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.RawRepresentable {}
extension Inthegametv.ChannelDirection : Swift.Equatable {}
extension Inthegametv.ChannelDirection : Swift.Hashable {}
extension Inthegametv.ChannelDirection : Swift.RawRepresentable {}
extension Inthegametv.AnalyticsEventType : Swift.Equatable {}
extension Inthegametv.AnalyticsEventType : Swift.Hashable {}
extension Inthegametv.AnalyticsEventType : Swift.RawRepresentable {}
extension Inthegametv.AnalyticsParent : Swift.Equatable {}
extension Inthegametv.AnalyticsParent : Swift.Hashable {}
extension Inthegametv.AnalyticsParent : Swift.RawRepresentable {}
extension Inthegametv.AnalyticsModule : Swift.Equatable {}
extension Inthegametv.AnalyticsModule : Swift.Hashable {}
extension Inthegametv.AnalyticsModule : Swift.RawRepresentable {}
extension Inthegametv.ModuleType : Swift.Equatable {}
extension Inthegametv.ModuleType : Swift.Hashable {}
extension Inthegametv.ModuleType : Swift.RawRepresentable {}
extension Inthegametv.LeaderboardSorting : Swift.Equatable {}
extension Inthegametv.LeaderboardSorting : Swift.Hashable {}
extension Inthegametv.LeaderboardSorting : Swift.RawRepresentable {}
extension Inthegametv.WebPDecodingError : Swift.Equatable {}
extension Inthegametv.WebPDecodingError : Swift.Hashable {}
extension Inthegametv.WebPDecodingError : Swift.RawRepresentable {}
extension Inthegametv.WebPScalingMode : Swift.Equatable {}
extension Inthegametv.WebPScalingMode : Swift.Hashable {}
extension Inthegametv.ITGContent : Swift.Equatable {}
extension Inthegametv.ITGContent : Swift.Hashable {}
extension Inthegametv.ITGContent : Swift.RawRepresentable {}
extension Inthegametv.ITGOverlayView.AutoBlockMode : Swift.Equatable {}
extension Inthegametv.ITGOverlayView.AutoBlockMode : Swift.Hashable {}
extension Inthegametv.ITGOverlayView.AutoBlockMode : Swift.RawRepresentable {}
extension Inthegametv.LeaderboardPeriod : Swift.Equatable {}
extension Inthegametv.LeaderboardPeriod : Swift.Hashable {}
extension Inthegametv.LeaderboardPeriod : Swift.RawRepresentable {}
