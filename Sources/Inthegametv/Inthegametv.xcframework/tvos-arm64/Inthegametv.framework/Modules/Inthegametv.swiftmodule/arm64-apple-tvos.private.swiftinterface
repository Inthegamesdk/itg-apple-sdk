// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-tvos14.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Inthegametv
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreMedia
import Foundation
@_exported import Inthegametv
import StorketService
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum ITGMenuItem : Swift.String, Swift.CaseIterable, Swift.Decodable {
  case account
  case leaderboard
  case shop
  case chat
  case stats
  case `extension`
  case debug
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Inthegametv.ITGMenuItem]
  public typealias RawValue = Swift.String
  public static var allCases: [Inthegametv.ITGMenuItem] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct User : Swift.Codable {
  public var name: Swift.String {
    get
  }
  public var email: Swift.String {
    get
  }
  public var level: Swift.Int {
    get
  }
  public var thumbnail: Swift.String? {
    get
  }
  public let id: Swift.String
  public var stats: [Inthegametv.UserChannelPoints]? {
    get
  }
  public var activities: [Inthegametv.UserActivity]? {
    get
  }
  public var visibleActivities: Inthegametv.UserPermissions {
    get
  }
  public let createdAt: Foundation.Date
  public let language: Swift.String
  public let foreignId: Swift.String?
  public let role: Inthegametv.UserRole
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserChannelPoints : Swift.Codable {
  public let channelSlug: Swift.String
  public var coins: Swift.Int {
    get
  }
  public var expoints: Swift.Int {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserActivity : Swift.Codable {
  public let id: Swift.String
  public let answer: Swift.String
  public var correctAnswer: Swift.String?
  public let channelSlug: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UserRole : Swift.String, Swift.Codable {
  case user
  case guest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LeaderboardDisplayMode : Swift.String, Swift.Codable {
  case all
  case registered
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChannelDirection : Swift.String, Swift.Codable {
  case ltr
  case rtl
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticsEventType : Swift.String {
  case view
  case engage
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ModuleType : Swift.String, Swift.Codable {
  case poll
  case prediction
  case rating
  case quiz
  case wiki
  case product
  case module
  case sequence
  case account
  case leaderboard
  case shop
  case chat
  case stats
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserPermissions : Swift.Codable {
  public let rating: Swift.Bool
  public let prediction: Swift.Bool
  public let product: Swift.Bool
  public let quiz: Swift.Bool
  public let poll: Swift.Bool
  public let wiki: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LeaderboardResponse : Swift.Codable {
  public var all: [Inthegametv.LeaderboardItem]
  public var myself: Inthegametv.LeaderboardItem?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LeaderboardItem : Swift.Codable {
  public let rankingPosition: Swift.Int
  public let userName: Swift.String
  public let thumbnail: Swift.String?
  public let totalCoins: Swift.Int?
  public let totalExpoints: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum LeaderboardSorting : Swift.String, Swift.Decodable {
  case expoints
  case coins
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AnalyticsInfo {
  public let module: Swift.String
  public let submodule: Swift.String?
  public let sponsor: Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PassthroughView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ITGStorketHelper : ObjectiveC.NSObject {
  public func connect(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stop()
  public func connectChat(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stopChat()
  public func connectStats(accountId: Swift.String, channelSlug: Swift.String, environment: Inthegametv.ITGEnvironment, token: Swift.String)
  public func stopStats()
  @objc override dynamic public init()
  @objc deinit
}
extension Inthegametv.ITGStorketHelper : StorketService.StorketDelegate {
  public func didReceive(messages: [StorketService.StorketMessage], storketType: StorketService.StorketType)
}
public protocol ITGPlayerAdapterDelegate : AnyObject {
  func videoPlaying(_ time: Foundation.TimeInterval)
  func videoPaused(_ time: Foundation.TimeInterval)
  func videoControllsVisibilityChanged(_ isVisible: Swift.Bool)
  func menuButtonAction()
}
public protocol ITGPlayerAdapter : AnyObject {
  var delegate: (any Inthegametv.ITGPlayerAdapterDelegate)? { get set }
  func setup()
  func startVideo(_ url: Foundation.URL)
  func getPlayerView() -> UIKit.UIView?
  func getVideoResolution() -> CoreFoundation.CGSize
  func isPlaying() -> Swift.Bool
  func play()
  func pause()
  func seek(_ time: Foundation.TimeInterval)
  func getCurrentTime() -> Foundation.TimeInterval
  func isControlsVisible() -> Swift.Bool
}
public protocol ITGOverlayDelegate : AnyObject {
  func overlayDidLoadChannelInfo(_ videoUrl: Swift.String?)
  func overlayRequestedVideoTime()
  func overlayRequestedPause()
  func overlayRequestedPlay()
  func overlayRequestedFocus()
  func overlayReleasedFocus()
  func overlayResizeVideoWidth(activityWidth: CoreFoundation.CGFloat)
  func overlayResetVideoWidth()
  func overlayResizeVideoHeight(activityHeight: CoreFoundation.CGFloat)
  func overlayResetVideoHeight()
  func overlayReceivedDeeplink(_ link: Swift.String)
  func overlayRequestedVideoSeek(time: Foundation.TimeInterval)
  func overlayRequestedVideoResolution() -> CoreFoundation.CGSize
  func overlayDidProcessAnalyticEvent(info: Inthegametv.AnalyticsInfo, type: Inthegametv.AnalyticsEventType)
  func userState(_ user: Inthegametv.User)
  func overlayDidPresentContent(_ content: Inthegametv.ITGContent)
  func overlayDidEndPresentingContent(_ content: Inthegametv.ITGContent)
}
public enum ITGContent {
  case slip
  case menu
  case sidebar
  case popup
  case notification
  public static func == (a: Inthegametv.ITGContent, b: Inthegametv.ITGContent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGOverlayView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var overlayVersion: Swift.String
  @_Concurrency.MainActor(unsafe) public class var reactCompatMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any Inthegametv.ITGOverlayDelegate)?
  @_Concurrency.MainActor(unsafe) public var blockMenu: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var blockNotifications: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var blockSlip: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var blockSidebar: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var bottomMargin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var injectionDelay: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var canOpenMenuFromRemote: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var adsMetadata: [Swift.Dictionary<Swift.String, Any>]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: Inthegametv.ChannelDirection? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredFocusEnvironments: [any UIKit.UIFocusEnvironment] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func load(accountId: Swift.String, environment: Inthegametv.ITGEnvironment, delegate: (any Inthegametv.ITGOverlayDelegate)?, foreignId: Swift.String? = nil, userName: Swift.String? = nil, userAvatar: Swift.String? = nil, userRole: Inthegametv.UserRole)
  @_Concurrency.MainActor(unsafe) public func load(channelSlug: Swift.String, secondaryChannelSlug: Swift.String? = nil, accountId: Swift.String, environment: Inthegametv.ITGEnvironment, delegate: (any Inthegametv.ITGOverlayDelegate)?, language: Swift.String = "en", foreignId: Swift.String? = nil, userName: Swift.String? = nil, userAvatar: Swift.String? = nil, userRole: Inthegametv.UserRole)
  @_Concurrency.MainActor(unsafe) public func getLeaderboard(_ page: Swift.Int, limit: Swift.Int, period: Inthegametv.LeaderboardPeriod, leaderboardSorting: Inthegametv.LeaderboardSorting, leaderboardDisplayMode: Inthegametv.LeaderboardDisplayMode, completion: @escaping (Inthegametv.LeaderboardResponse?, (any Swift.Error)?) -> ())
  @_Concurrency.MainActor(unsafe) public func resetUser()
  @_Concurrency.MainActor(unsafe) public func closeInteractionIfNeeded() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayingInteraction() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayingSidebar() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func videoPaused(time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public func videoPlaying(time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public func setLiveMode(enabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func openMenu()
  @_Concurrency.MainActor(unsafe) public func openAccount()
  @_Concurrency.MainActor(unsafe) public func openLeaderboard()
  @_Concurrency.MainActor(unsafe) public func openShop()
  @_Concurrency.MainActor(unsafe) public func openChat()
  @_Concurrency.MainActor(unsafe) public func openStats()
  @_Concurrency.MainActor(unsafe) public func openExtension()
  @_Concurrency.MainActor(unsafe) public func closeMenu()
  @_Concurrency.MainActor(unsafe) public func closeAccount()
  @_Concurrency.MainActor(unsafe) public func closeLeaderboard()
  @_Concurrency.MainActor(unsafe) public func closeShop()
  @_Concurrency.MainActor(unsafe) public func closeChat()
  @_Concurrency.MainActor(unsafe) public func closeStats()
  @_Concurrency.MainActor(unsafe) public func closeExtension()
  @_Concurrency.MainActor(unsafe) public func isMenuVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func currentContent() -> [Inthegametv.ITGContent]
  @_Concurrency.MainActor(unsafe) public func currentMenuPage() -> Inthegametv.ITGMenuItem?
  @_Concurrency.MainActor(unsafe) public func closeAll()
  @objc deinit
}
extension Inthegametv.ITGOverlayView {
  @_Concurrency.MainActor(unsafe) public func menuShouldClose()
}
@objc @_Concurrency.MainActor(unsafe) open class ITGPlayerViewController : UIKit.UIViewController, Inthegametv.ITGOverlayDelegate, Inthegametv.ITGPlayerAdapterDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredFocusedView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(channelSlug: Swift.String, secondaryChannelSlug: Swift.String? = nil, accountId: Swift.String, environment: Inthegametv.ITGEnvironment, language: Swift.String = "en", foreignId: Swift.String? = nil, userName: Swift.String? = nil, userAvatar: Swift.String? = nil, userRole: Inthegametv.UserRole = .user, playerAdapter: any Inthegametv.ITGPlayerAdapter, shouldResetOverlayUser: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func setupPlayer()
  @_Concurrency.MainActor(unsafe) open func startVideo(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) open func setupOverlay()
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func closeButtonPressed(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func remoteMenuButtonAction(recognizer: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) open func menuButtonAction()
  @_Concurrency.MainActor(unsafe) open func videoPlaying(_ time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) open func videoPaused(_ time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) open func videoControllsVisibilityChanged(_ isVisible: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func overlayDidPresentContent(_ content: Inthegametv.ITGContent)
  @_Concurrency.MainActor(unsafe) open func overlayDidEndPresentingContent(_ content: Inthegametv.ITGContent)
  @_Concurrency.MainActor(unsafe) open func overlayDidLoadChannelInfo(_ videoUrl: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func userState(_ user: Inthegametv.User)
  @_Concurrency.MainActor(unsafe) open func overlayDidProcessAnalyticEvent(info: Inthegametv.AnalyticsInfo, type: Inthegametv.AnalyticsEventType)
  @_Concurrency.MainActor(unsafe) open func overlayRequestedVideoResolution() -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func overlayReceivedDeeplink(_ link: Swift.String)
  @_Concurrency.MainActor(unsafe) open func overlayRequestedPause()
  @_Concurrency.MainActor(unsafe) open func overlayRequestedPlay()
  @_Concurrency.MainActor(unsafe) open func overlayRequestedFocus()
  @_Concurrency.MainActor(unsafe) open func overlayReleasedFocus()
  @_Concurrency.MainActor(unsafe) open func overlayResizeVideoHeight(activityHeight: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func overlayResetVideoHeight()
  @_Concurrency.MainActor(unsafe) open func overlayResizeVideoWidth(activityWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func overlayResetVideoWidth()
  @_Concurrency.MainActor(unsafe) open func overlayRequestedVideoTime()
  @_Concurrency.MainActor(unsafe) open func overlayRequestedVideoSeek(time: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGAnswerView : UIKit.UIView, Inthegametv.NibView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var button: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryButton: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var roundButton: Inthegametv.FocusTvButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var pollPercentageLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var coinsLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageHeightConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var mainImageWidthConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageHeightConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageWidthConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryButtonBottom: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageTrailingToButton: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageLeadeingToMainImage: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryImageVerticalCenterToMainImage: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var pollPercentageLabelLeadingConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var buttonVerticalCenterConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var pressedScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var pressedAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum LeaderboardPeriod : Swift.String, Swift.CustomStringConvertible, Swift.CaseIterable {
  case alltime
  case week
  case day
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Inthegametv.LeaderboardPeriod]
  public typealias RawValue = Swift.String
  public static var allCases: [Inthegametv.LeaderboardPeriod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Inthegametv.LeaderboardItem : Swift.Equatable {
  public static func == (lhs: Inthegametv.LeaderboardItem, rhs: Inthegametv.LeaderboardItem) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class ITGTool {
  public static func getVideoURL(channelSlug: Swift.String, accountId: Swift.String, language: Swift.String, environment: Inthegametv.ITGEnvironment, completion: @escaping (Swift.String?, (any Swift.Error)?) -> ())
  @objc deinit
}
public struct ITGEnvironment {
  public let apiBaseURL: Swift.String
  public let imageBaseURL: Swift.String
  public let envName: Swift.String
  public let storageURL: Swift.String
  public init(envName: Swift.String)
  public init(apiBaseURL: Swift.String, imageBaseURL: Swift.String, envName: Swift.String, storageURL: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ITGRatingAnswerView : UIKit.UIView, Inthegametv.NibView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol NibView {
  static func nibName(_ isLandscapeiOS: Swift.Bool) -> Swift.String
}
extension Inthegametv.NibView {
  public static func nibName(_ isLandscapeiOS: Swift.Bool = false) -> Swift.String
}
extension Inthegametv.NibView where Self : UIKit.UIView {
  public static func fromNib(_ isLandscapeiOS: Swift.Bool = false) -> Self
}
extension UIKit.UIImage {
  public class func imageWithColor(_ color: UIKit.UIColor) -> UIKit.UIImage
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
  convenience public init?(hex: Swift.String, opacity: CoreFoundation.CGFloat)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func constraintsFillSuperview(top: CoreFoundation.CGFloat? = 0, bottom: CoreFoundation.CGFloat? = 0, leading: CoreFoundation.CGFloat? = 0, trailing: CoreFoundation.CGFloat? = 0)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class FocusTvButton : UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBackgroundEndColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBackgroundEndColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var pressedScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var pressedAlpha: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientStartPoint: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientEndPoint: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var leftContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rightContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomContentInset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var focusedBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var minWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var minHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var buttonType: UIKit.UIButton.ButtonType {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sendActions(for controlEvents: UIKit.UIControl.Event)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SpriteImageView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Inthegametv.ITGMenuItem : Swift.Equatable {}
extension Inthegametv.ITGMenuItem : Swift.Hashable {}
extension Inthegametv.ITGMenuItem : Swift.RawRepresentable {}
extension Inthegametv.UserRole : Swift.Equatable {}
extension Inthegametv.UserRole : Swift.Hashable {}
extension Inthegametv.UserRole : Swift.RawRepresentable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.Equatable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.Hashable {}
extension Inthegametv.LeaderboardDisplayMode : Swift.RawRepresentable {}
extension Inthegametv.ChannelDirection : Swift.Equatable {}
extension Inthegametv.ChannelDirection : Swift.Hashable {}
extension Inthegametv.ChannelDirection : Swift.RawRepresentable {}
extension Inthegametv.AnalyticsEventType : Swift.Equatable {}
extension Inthegametv.AnalyticsEventType : Swift.Hashable {}
extension Inthegametv.AnalyticsEventType : Swift.RawRepresentable {}
extension Inthegametv.ModuleType : Swift.Equatable {}
extension Inthegametv.ModuleType : Swift.Hashable {}
extension Inthegametv.ModuleType : Swift.RawRepresentable {}
extension Inthegametv.LeaderboardSorting : Swift.Equatable {}
extension Inthegametv.LeaderboardSorting : Swift.Hashable {}
extension Inthegametv.LeaderboardSorting : Swift.RawRepresentable {}
extension Inthegametv.ITGContent : Swift.Equatable {}
extension Inthegametv.ITGContent : Swift.Hashable {}
extension Inthegametv.LeaderboardPeriod : Swift.Equatable {}
extension Inthegametv.LeaderboardPeriod : Swift.Hashable {}
extension Inthegametv.LeaderboardPeriod : Swift.RawRepresentable {}
